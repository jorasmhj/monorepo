name: Services - Build

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        required: true
        type: choice
        options:
          - "dev"
          - "production"

      service:
        description: Service
        required: true
        type: choice
        options:
          - "all"
          - "service1"
          - "service2"

  pull_request:
    branches: [dev, main]
    paths:
      - "services/**"

jobs:
  build-turbo:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Lint services
        run: npm run lint

      - name: Build
        run: npm run build

  detect-changed-files:
    name: Detect File changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: dorny/paths-filter@v2
        if: github.event_name != 'workflow_dispatch'
        id: changes
        with:
          base: ${{ github.base_ref || 'dev' }}
          filters: |
            service1:
              - 'services/service1/**'
            service2:
              - 'services/service2/**'

      - name: Set Output
        id: changed-services
        run: |
          is_manual_run=$(echo ${{ contains(github.event_name, 'workflow_dispatch') }})
          CHANGES=${{ toJson(steps.changes.outputs.changes) }}

          if [ $is_manual_run == 'true' ]; then
            input_services=${{ github.event.inputs.service }}

            if [ $input_services == 'all' ]; then
              input_services="action,admin,auth,common,export,files,forms,manager,rounding"
            fi

            converted_inputs=$( jq -nc --arg input_services "$input_services" '$input_services | split(",")' )
            CHANGES=$converted_inputs
          fi

          echo "changes: $CHANGES"
          echo "changed_services=${CHANGES}" >> $GITHUB_ENV

    outputs:
      services: ${{ env.changed_services }}

  build:
    needs: [detect-changed-files]
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 1 # Run jobs in matrix sequentially.
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.detect-changed-files.outputs.services) }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker Image
        run: |
          docker build -t image-${{ matrix.service }} --build-arg APP=${{ matrix.service }} --build-arg START_COMMAND=start .
          docker ps
